<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAEACABoBQAANgAAACAgAAABAAgAqAgAAJ4FAAAwMAAAAQAIAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAAAAAQAAEwsAABMLAAAAAQAAAAEAAAAAAAByXE4Ac11OAHReUAByXVAAd3RwAHRf
        TwB0Z10AfZ2sAG9iWgBwZGEAcWJcAHNjWAB9obQAg8LjAHFgVwBjgKcAYIq+AHqaqwBrXloAaV9dAHNx
        bgBwWUsAcl1NAH5sXwCQj2IAhXxaAI6DegCBelkAo7BuAKSxbwB3ZFYApaSeALG1sQBxXU4Ag3duAJSP
        iQB0X1AAjY1gAIh8cwD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQQBAQQBAQEBAQAAAAEBAQEE
        AQQEAQEEBAEBAAEBASIBARYWAQQBAQQBBAQBASUZGCYmIgEWJycWBAEWAQQBGh0dHCIDIyQkIyUBAQEB
        ARwdHhwXHyAhISAfAQQBAQYZGhoZBgQEGxsEBAEEBgEBBhcBBgEBARgYAQQBAQEBAQEVFQEBBAEBFgEB
        BAEEAwQJEhIJAQQTFBQJBAQBAQIMDQ4ODQwPEBEREA8BAQEBBAcICAcEBAkKCgsGBAEBAQEBBQUBAQEC
        AQIBBgEBBAEBBAEBBAEEAQQBAQEBAQABAQEBAgEEAQECAQEBAgAAAAEBAgEBAQMBAQQBAQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgA
        AAAgAAAAQAAAAAEACAAAAAAAAAQAABMLAAATCwAAAAEAAAABAAAAAAAAclxOAHNeUABzW08AbVZSAG9Z
        TgBjTk8Ac1xNAHJbVAB0X0gAc1pPAHVfUgBdUVYAbVpQAP//AAB6WE8AbGFOAHpZSQB0W04AdGZcAH+i
        tABxX0wAdW5pAIK93AByW0wAdGNXAHZ4dwBxYFYAcmVbAHFiXABhYnAAgKi9AIPD5QCFxugAhs3yAIXE
        5gB8pboAZYSvAF+T0wBektIAc2JXAITF6ABhga0AaltSAGdcVgBtcXIAaFhRAGRYVgBtWEsAcmxoAHqf
        sQBrXlYAdWFRAJGGfQCIgHgAeWNSAIV7WgCTlGQAemxUAH1uVQB9a14Au8K/AK/CdgCfp2sAnahrAK/B
        dgBzZ1AAm6RpAKKsbQB2aVIAoZ2WAJyakwCZl5MAeWZZAL3FwwDR4OAA0N/fAJ+qbACZmJMAfiYyAGtY
        SgBpVUkAf3dXAIyOYACHfnYAbFJIAHJZTAByTDcAc2RBAIIAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQMCAQEDAgEB
        AgEBASsBAAAAAAAAAAAAAAAAAAABAQEBAwICAQECAQICAQEBAQEFAQAAAAAAAAAAAAADWQECAQECAQEC
        AQEBAgECAgEBAgEBNwUAAAAAAAAAAQIBAQEBAgECAgEBAgIBAgEBAgEBAgEBWBUAAAAAABUCAQECAQEC
        AQEVAgEBAQEBAwIKAQICAQEBVwsAAABVNAECAVBQBQEBBVAFAQIBAgIBVlUwAQECAQIBAQAAEQUBAQIB
        UlNCBQVCU1IBAQIBAgEKVFQCAgECAQEBAQABAQECAQs5PkNCQkM+OQsBAQIBAzg9PRYBAgECAQEFBQEB
        AQICATs/Pk1DPj87ARUBAVBRBTY2BVEFAQIBAQMBAQECAQECATpNPj5NOgICAgILNk5OTkhIRzYCAgIB
        AU8NAQEBAQEFQj8+Pj9CBQECAUlKS0tLTExLSkkBAgEBAgECAQICAUJDQUREQUNFAQEBCzZGRkdIRkY2
        AgIBAgEBAQECAQIVOT4/OztAQTkCAQIBAQI0NjY0AgMBAgICAQIBAgEBAQs4OToCATs5OAIBAQIBATw9
        PTwBAQEBAQEBAQECAQIBAQELAQEBAQsCAQICAQECNDU2NwECAQICAQIBAgECAQELAQEBAQMCAQECAQEB
        AgECAwMCAgEBAgECAQICAQIBAgECAQIzMwUBAQECAgECAQIBAQIBAgIBAgEBAgECAQIBAgEBGTIyHAEB
        AgEBAgEBAQICAQEBAQIBAgIBAQEBAwIBAzAxFxcxMAECAQEBAQUBBQUwBQEBAQECAQEBAgIBAgErLC0X
        Fy0sKwECAgIuLy8vLy8vLgUCAgECAwICAQIBKCQgKSIiIyAkGQECCConJycnJycqGwEBAQIBAQECAQEZ
        HyAhIiIhIyQZAQEbJSYnJyYmJiUbAQECAQEDAQEBAQIZExoXFxoTEwECAQIbHB0dHBwdGwECAQECHgEB
        AQICAQEBFhcXFhgBAQECAQICAQEBAQEBAgECAgEBAQEBAgECAQETFBQTAQIBAgECAgEBAgECAgECAhUB
        FQERAhIBAgEBAgETEwEBAQECAgEBAgIBAgEBAgECAQEBAAAPEAIBAgECAQEBAQIBAgEBAgIBAQEBAgIB
        AgEBAQAAAAABAQIBAgEBCwEBAQIBAgIBAQIBAgECAQIBAQ4BAAAAAAADCgEBAQsBAQsBAgECAQECAQIB
        AgEBAQEMDQAAAAAAAAABBgcBAQEBAQIBAgECAQECAQEBAgEBCAkAAAAAAAAAAAAAAQEBAQEBAQEBAgEC
        AgEBAgEBAwEAAAAAAAAAAAAAAAAAAAEBAQIBAgEBAgECAQMBBAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAAAACQAAEwsAABMLAAAAAQAAAAEAAAAAAABvX08Ac1tOAHJgTwBzXE8AeFpLAHRe
        TgBzXlAAalVVAHVbTAB/ZkwAf39/AHVbTwBwW00Ae4aKAHReUACHz/UAeoaKAHyVogBxVVUAeZOgAGZm
        ZgB+maYAh8zxAGh8mwBfl90AXpngAF6X3QB/Pz8AhsntAF+W2QB2k6EAYXeXAGF3lgBiUEYAdZCeAGRS
        RwBrV0oAalhLAHeSnwBqVksAdYOIAHSChwBsWkwAb32EAG99gwBsWEwAeGRXAK2tqACMiV8AioVfAHVg
        UgCcl48A0eDgAJuWjgCvwnYAmJtnAI2JYACJfHEA0N3dAIiDXQBsWEsAb2FYAI+UYgCXmWYAkpZkAIyA
        dgCFe3IAVVVVAGRTRwC4vbkAt7y4AJGVYwDK19YAytbVAJKYZACFfXYAs7m3ALK4tQBnVUkAdGFVAKus
        pwCIe3AAg4FbAIF9WQBxXksAd1VVAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANVBAQE
        BAQEBAQHBAJWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMEBAQEAwQEAwQEBAMGBAQGAwQI
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBAQEBAQEBAQEBAQGBwQEBAQEAwQEBAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAACgQHBAQEAwYEBAMEAwQDBAQEAwQEBAQDBAQECwAAAAAAAAAAAAAAAAAAAAAAAABV
        BAMGBAQEBAQEAwQEBgcEBAYDBAQEBAQEBAQEBC4AAAAAAAAAAAAAAAAAAAAAAAQEBAQDBAMGBAQHBgQE
        AwQEBAcEBAQDBgcEAwYHBAYPAAAAAAAAAAAAAAAAAAAABAQEBAQEAwQEBgMEBAQHBAQEAwQEBAMEBAYE
        BAcGBAQHBAAAAAAAAAAAAAAAAAAEBAQEAwQEBgQEBwQEBAMGBAQHBgQEBwYEBAMEBAQDBAQEBAQAAAAA
        AAAAAAAAAAQEBAQBJCQEBAMEBAIkJAEEBgMHBAQEBwQEBCUlBAQDBAMEAwQHAAAAAAAAAAAABAQEBAQr
        U1RFLgQEPSRUUy4EBwQGBAQDBgQEJj4+JgQEBAQEBAQEDQAAAAAAAAAFBAYEAwQxNzdBJAQuRUg3NzkD
        BAQDBAcGAwQEOjs7UgQEBAMEAwQDBAAAAAAAAAAEBAMEBAQyNzc3QUVFQTc3NzIGBAQEBAQEBAQENDU1
        NgQEAwYEBAQEBAQAAAAAAAkEBgMEAwQDODc3N0E/Nzc3OAQEBgcEBgMEAi4BUFFRMz09AQQEBAQEBAQT
        AAAAAAMEBAQEBAQGBkA3Nzc3Nzc4BgQEAwQEBwRPIiIiIiIiIiIkIk8EBAQEAwQEAAAABAQEBAQEBAQE
        BAJINzc3N0sBBAQPBAQGBwRMTU1NTU1NTU1OTkwGBwIHBgQEHAAABAQEAwYEBAMGLkVINzc3N0FFLgYG
        BAQDBARJNTU1NTU1NTU1NUoGBgcEBAQEAwBEBAcGAwQEBAQEJD83Nzc3NzdBRQQDBAQEBwRGNTU1NTU1
        NTU1NUcEBAYDBAQEBAACBAQEBAQGBwQmPzc3NzhANzc3QSYEBAQDBgQzOkJCQkNDQkJCOjMEBAcEBAME
        A0QEBgMEAwYDBAQyNzc3OAcEODc3NzwEBAMEBAYEBAQEPT4+JgYEBAcEBAQEBgQEBAcEBwQEBAQEBAQx
        Nzc4BAYDBDg3NzkEBAQEBAMEBAQDOjs7OgQEBAYDBgQEAwMGBAQEBAMGBAYDBAYDMTIHBAQDBwYyMTMH
        BAQEBAQDBAMENDU1NgQEAwQEAwQDBAQEBAQEBAQEBAQEBAYPAwQGBAQGBAMEBAMGAwQHBAQGBwYELzAw
        LwQEBgcEBAQEBAQDBAQEBgQEBAQEBgcGBAQDBAQHBAYDBAQEBgQGAwQHBAMEBAQEBAQEBAQEBAQEBAQE
        BAQEAwQDBgQEAwIHBAQEBAQEBAQEBAQEAwQEBAQEBAYHBAMGBAQDBgMGBgMEAwQDBAMEBAQEBAQHBAQE
        BAQEBCQkAgQEAwQDBAQEBAQEBAcGAwQEBAcGAwQHBAMEBAQDBAQEAwQDBAQGAwQDBAMEKywtLgQEBAQG
        BAQHBAMGBAQEBAMGBAQEBAQEBAYHBAQGBwQEBAQEAwQEBAMEBAQEKRAQKgQEBAQDBgMGBAQHBAQEAwQH
        BAMEBwYEBAQEBAQEBAQEBAQDBgcEBAQEBAMEFBAQFAQDBAQEBwQDBAQEBwQEBAQEBAYEBAMEBwQDBgcE
        BAQDBAMEBAQDBAQEJSUmJxAQHyglJQQDBAQEBAcCJSgoJSgoKCgoJQIHBgQEAwQDBAQEBAYHBAQGBwQi
        IiIiIxAQIyIiIiQEBAQEAwYiIiIiIiIiIiIiIiQEAwQEBAQEBAQEBAQEBwQEBAQfFxAQEBAQEBAQFx8E
        AwQEBgcgGxoaGhoaGhoaGSEEBAMEAwQDBBwcBAQEBgMEBAcdEBAQEBAQEBAQEB0EBAQEAwQeGhoaGhoa
        GhoaGh4EBAQEBAQEAwAABAQEBAQEBAQWFxAQEBAQEBAQFxYEBAQHBgQYGRoaGhoaGhoaGxgEBAYDBAQE
        BAAABAQDBAMGBAQEBAMEFBAQFAQGBwQDBAQEAwQEBAcDBgQEBwYEBAMGBAQEBAQEFQAAAAQEAwQDBAQH
        BwYEFBAQFAQDBAQEBwQEBAcEBgcEBAQEBAQEAwQEAwQEBgMEAAAAAAMEBAQGBwMGBAQEEhAQEgQEBAQD
        BgQEBAYDAwQEBAMGBwQHBgQEBAQEAwQTAAAAAAAEAwQEBAQEBAcDDhAQEQcEBAQEBAQEBAYHBAQEBwQH
        BgQEBAQDBAQEBgMAAAAAAAAFBgcEBAQEAwYGBw4ODwYEAwYHBAMEBAMEBAQDBgQEAwQHBAQGBAMEBAAA
        AAAAAAAADAQEBAQEBAQEBwQDAwQEBgMEBAYEBwQEBgcEBAQEBAQGAwQHBAQEDQAAAAAAAAAAAAYHBAQE
        AwQEBAQGBAQEBwQEBAcDBgQEAwQEBAMGBwQEBAQEBAQCAAAAAAAAAAAAAAAEBAQEBAcGAwQHBAQEAwQE
        BAMEBAQEBAMEBAQEBAMEBAQEBAMAAAAAAAAAAAAAAAAABAMGBAQEBAQEBwQEBgcEBAYEBAMGBAYEBAMG
        BAYEBAMGBAAAAAAAAAAAAAAAAAAAAAQEBAQEBwYEBgMEBwYDBAcEAwQEBAMGAwQEBgQEBgYGAAAAAAAA
        AAAAAAAAAAAAAAAEBAQEBAMEBAQEBAQEBAQHBgQEBAQEBAQEAwQEBAMAAAAAAAAAAAAAAAAAAAAAAAAA
        CgQEBAMGBAQEBAQHBgQDBgQEBAQEAwQEBgQECwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBAQEAwQEBAQE
        AwQEBAQDAwQEBAQEBgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYEBgYEBwQEBAQEBAQGBAMEBAQI
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAgMEBAMEBAQEBAQFAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>